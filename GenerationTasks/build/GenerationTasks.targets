<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project>
  <Import Project="NSwagServiceReference.targets" />
  <Target Name="_CheckServiceReferences">
    <Error Condition="'@(ServiceProjectReference)' != '' AND '%(CodeGenerator)' == ''" Text="ServiceProjectReference items '@(ServiceProjectReference)' lack CodeGenerator metadata." />
    <Error Condition="'@(ServiceUriReference)' != '' AND '%(CodeGenerator)' == ''" Text="ServiceUriReference items '@(ServiceUriReference)' lack CodeGenerator metadata." />
    <Error Condition="'@(ServiceFileReference)' != '' AND '%(CodeGenerator)' == ''" Text="ServiceFileReference items '@(ServiceFileReference)' lack CodeGenerator metadata." />
  </Target>

  <!-- ServiceProjectReference support -->

  <!-- Inputs and outputs cause MsBuild to batch this target but include it in every build. -->
  <Target Name="_ServiceProjectReferenceGenerator_GetPreferredTargetFramework" Inputs="%(ServiceProjectReference.Identity)" Outputs="&lt;not-a-file !&gt;">
    <PropertyGroup>
      <Identity>%(ServiceProjectReference.Identity)</Identity>
    </PropertyGroup>
    <ItemGroup>
      <_Possibilities Remove="@(_Possibilities)" />
    </ItemGroup>

    <MSBuild Projects="$(Identity)"
      RebaseOutputs="true"
      RemoveProperties="TargetFramework;TargetFrameworks;RuntimeIdentifier"
      Targets="GetTargetFrameworks"
      UseResultsCache="true">
      <Output TaskParameter="TargetOutputs" ItemName="_Possibilities" />
    </MSBuild>

    <!-- Please excuse the mess necessary to extract information from _Possibilities and use it in ServiceProjectReference. -->
    <PropertyGroup>
      <Index>$([System.String]::Copy('%(_Possibilities.TargetFrameworks)').IndexOf(';'))</Index>
      <PreferredTargetFramework Condition="'$(Index)' == '-1'">%(_Possibilities.TargetFrameworks)</PreferredTargetFramework>
      <PreferredTargetFramework Condition="'$(Index)' != '-1'">$([System.String]::Copy('%(_Possibilities.TargetFrameworks)').SubString(0, $(Index)))</PreferredTargetFramework>
    </PropertyGroup>

    <ItemGroup>
      <ServiceProjectReference Update="@(ServiceProjectReference)" Condition="'%(ServiceProjectReference.Identity)' == '$(Identity)'">
        <DocumentGenerator Condition="'%(ServiceProjectReference.DocumentGenerator)' == ''">NSwag</DocumentGenerator>
        <DocumentPath Condition="'%(ServiceProjectReference.DocumentPath)' == ''">$(ServiceProjectReferenceDirectory)%(Filename).json</DocumentPath>
        <PreferredTargetFramework Condition="'%(ServiceProjectReference.PreferredTargetFramework)' == ''">$(PreferredTargetFramework)</PreferredTargetFramework>
      </ServiceProjectReference>
    </ItemGroup>

    <PropertyGroup>
      <Identity />
      <Index />
      <PreferredTargetFramework />
    </PropertyGroup>
    <ItemGroup>
      <_Possibilities Remove="@(_Possibilities)" />
    </ItemGroup>
  </Target>

  <!-- Inputs and outputs cause MsBuild to batch this target but include it in every build. -->
  <Target Name="_ServiceProjectReferenceGenerator_GetTargetPath" Inputs="%(ServiceProjectReference.Identity)" Outputs="&lt;not-a-file !&gt;">
    <PropertyGroup>
      <Identity>%(ServiceProjectReference.Identity)</Identity>
    </PropertyGroup>
    <ItemGroup>
      <_Possibilities Remove="@(_Possibilities)" />
    </ItemGroup>

    <MSBuild Projects="$(Identity)"
      Properties="TargetFramework=%(ServiceProjectReference.PreferredTargetFramework)"
      RebaseOutputs="true"
      RemoveProperties="TargetFrameworks;RuntimeIdentifier"
      Targets="GetTargetPath"
      UseResultsCache="true">
      <Output TaskParameter="TargetOutputs" ItemName="_Possibilities" />
    </MSBuild>

    <!-- Please excuse the mess necessary to extract information from _Possibilities and use it in ServiceProjectReference. -->
    <PropertyGroup>
      <ProjectTargetPath>%(_Possibilities.FullPath)</ProjectTargetPath>
    </PropertyGroup>

    <ItemGroup>
      <ServiceProjectReference Update="@(ServiceProjectReference)" Condition="'%(ServiceProjectReference.Identity)' == '$(Identity)'">
        <ProjectTargetPath Condition="'%(ServiceProjectReference.ProjectTargetPath)' == ''">$(ProjectTargetPath)</ProjectTargetPath>
      </ServiceProjectReference>
    </ItemGroup>

    <PropertyGroup>
      <Identity />
      <ProjectTargetPath />
    </PropertyGroup>
    <ItemGroup>
      <_Possibilities Remove="@(_Possibilities)" />
    </ItemGroup>
  </Target>

  <Target Name="_ServiceProjectReferenceGenerator_Build"
    Condition="'$(BuildProjectReferences)' == 'true'"
    Inputs="@(ServiceProjectReference)"
    Outputs="@(ServiceProjectReference -> '%(ProjectTargetPath)')">
    <MSBuild Projects="%(Identity)"
      BuildInParallel="$(BuildInParallel)"
      Properties="TargetFramework=%(ServiceProjectReference.PreferredTargetFramework)"
      RemoveProperties="TargetFrameworks;RuntimeIdentifier"
      Targets="Build" />
  </Target>

  <Target Name="_ServiceProjectReferenceGenerator_Core" Condition="'@(ServiceProjectReference)' != ''" DependsOnTargets="@(ServiceProjectReference -> '%(DocumentGenerator)DocumentGenerator')" />

  <Target Name="ServiceProjectReferenceGenerator" Condition="'@(ServiceProjectReference)' != ''" DependsOnTargets="$(ServiceProjectReferenceGeneratorDependsOn)" />

  <!-- ServiceUriReference support -->

  <Target Name="_ServiceUriReferenceGenerator_GetMetadata">
    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

    <GenerationTasks.GetFilenameFromUri Uris="@(ServiceUriReference)">
      <Output TaskParameter="Filenames" ItemName="_Temporary" />
    </GenerationTasks.GetFilenameFromUri>

    <ItemGroup>
      <_Temporary Update="@(_Temporary)">
        <DocumentPath Condition="'%(_Temporary.DocumentPath)' == ''">$(ServiceUriReferenceDirectory)%(LocalFilename)</DocumentPath>
      </_Temporary>
    </ItemGroup>
</Target>

  <Target Name="_ServiceUriReferenceGenerator_Core" Condition="'@(_Temporary)' != ''">
    <GenerationTasks.DownloadFile Uri="%(_Temporary.Identity)" DestinationPath="%(DocumentPath)" Overwrite="$(ServiceUriReferenceCheckIfNewer)" />

    <ItemGroup>
      <ServiceFileReference Remove="@(_Temporary -> '%(DocumentPath)')" />
      <ServiceFileReference Include="@(_Temporary -> '%(DocumentPath)')" SourceUrl="%(_Temporary.Identity)" />
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <Target Name="ServiceUriReferenceGenerator" DependsOnTargets="$(ServiceUriReferenceGeneratorDependsOn)" />

  <!-- ServiceFileReference support -->

  <Target Name="_ServiceFileReferenceGenerator_Core"
    Condition="'@(ServiceFileReference)' != ''"
    DependsOnTargets="@(ServiceFileReference -> '%(CodeGenerator)CodeGenerator')" />

  <Target Name="ServiceFileReferenceGenerator" BeforeTargets="BeforeCompile" DependsOnTargets="$(ServiceFileReferenceGeneratorDependsOn)" />
</Project>
